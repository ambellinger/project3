{"version":3,"sources":["components/Nav/index.js","components/Jumbotron/index.js","pages/Main.js","components/Form/index.js","pages/New.js","App.js","serviceWorker.js","index.js"],"names":["Nav","react_default","a","createElement","className","href","Jumbotron","_ref","children","style","color","height","clear","paddingTop","textAlign","backgroundImage","Main","components_Nav","components_Jumbotron","class","Component","Input","props","Object","assign","TextArea","rows","FormBtn","float","marginBottom","New","App","BrowserRouter","Switch","Route","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0TAeeA,MAXf,WACE,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eAAeC,KAAK,KAAjC,gCAGAJ,EAAAC,EAAAC,cAAA,KAAGC,UAAU,WAAWC,KAAK,UAA7B,wBCGSC,MAXf,SAAAC,GAAiC,IAAZC,EAAYD,EAAZC,SACnB,OACEP,EAAAC,EAAAC,cAAA,OACEM,MAAO,CAAEC,MAAO,QAAQC,OAAQ,IAAKC,MAAO,OAAQC,WAAY,IAAKC,UAAW,SAAUC,gBAAiB,oHAC3GX,UAAU,aAETI,ICsBQQ,mLAbX,OACJf,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACc,EAAD,MACAhB,EAAAC,EAAAC,cAACe,EAAD,MACAjB,EAAAC,EAAAC,cAAA,OAAKgB,MAAO,aAEhBlB,EAAAC,EAAAC,cAAA,gDAhBmBiB,aCHZ,SAASC,EAAMC,GACpB,OACErB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,QAAAoB,OAAAC,OAAA,CAAOpB,UAAU,gBAAmBkB,KAKnC,SAASG,EAASH,GACvB,OACErB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,WAAAoB,OAAAC,OAAA,CAAUpB,UAAU,eAAesB,KAAK,MAASJ,KAKhD,SAASK,EAAQL,GACtB,OACErB,EAAAC,EAAAC,cAAA,SAAAoB,OAAAC,OAAA,GAAYF,EAAZ,CAAmBb,MAAO,CAAEmB,MAAO,QAASC,aAAc,IAAMzB,UAAU,oBACvEkB,EAAMd,cCMEsB,mLAlBX,OACJ7B,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACc,EAAD,MACAhB,EAAAC,EAAAC,cAACe,EAAD,MACJjB,EAAAC,EAAAC,cAAA,OAAKgB,MAAO,aACZlB,EAAAC,EAAAC,cAAA,kDACAF,EAAAC,EAAAC,cAACkB,EAAD,MACApB,EAAAC,EAAAC,cAACkB,EAAD,MACApB,EAAAC,EAAAC,cAACkB,EAAD,MACApB,EAAAC,EAAAC,cAACsB,EAAD,MACAxB,EAAAC,EAAAC,cAACwB,EAAD,eAdkBP,aCyBHW,MAzBf,WACA,OAEA9B,EAAAC,EAAAC,cAAC6B,EAAA,EAAD,KACA/B,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAC8B,EAAA,EAAD,KACAhC,EAAAC,EAAAC,cAAC+B,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAGC,UAAYrB,IACjCf,EAAAC,EAAAC,cAAC+B,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,OAAMC,UAAYP,QCFhBQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO3C,EAAAC,EAAAC,cAAC0C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.dbc6cda5.chunk.js","sourcesContent":["import React from \"react\";\nimport \"../Nav/style.css\";\n\n\nfunction Nav() {\n  return (\n    <nav className=\"navbar\">\n      <a className=\"navbar-brand\" href=\"/\">\n        Explore Chicago Architecture\n      </a>\n      <a className=\"nav-item\" href=\"/saved\">My Saved Buildings</a>\n    </nav>\n  );\n}\n\nexport default Nav;\n","import React from \"react\";\n\nfunction Jumbotron({ children }) {\n  return (\n    <div\n      style={{ color: \"white\",height: 300, clear: \"both\", paddingTop: 120, textAlign: \"center\", backgroundImage: \"url(\" + \"http://nupress.northwestern.edu/sites/default/files/styles/header_image/public/01_image_0.jpg?itok=69lz_Ur2\" + \")\"}}\n      className=\"jumbotron\"\n    >\n      {children}\n    </div>\n  );\n}\n\nexport default Jumbotron;\n","import React, { Component } from \"react\";\nimport Nav from \"../components/Nav\";\nimport Jumbotron from \"../components/Jumbotron\"\n// import API from \"../utils/API\";\n\n\n\nclass Main extends Component{\n\n//     state ={\n//         buildings: []\n//     }\n\n// componentDidMount(){\n//     this.loadBuildings()\n// }\nrender(){\n    return(\n<div>\n    <Nav/>\n    <Jumbotron/>\n    <div class =\"container\">\n\n<h1> hello I am the main page</h1>\n</div>\n</div>\n    )\n}\n\n}\nexport default Main;","import React from \"react\";\n\n// This file exports the Input, TextArea, and FormBtn components\n\nexport function Input(props) {\n  return (\n    <div className=\"form-group\">\n      <input className=\"form-control\" {...props} />\n    </div>\n  );\n}\n\nexport function TextArea(props) {\n  return (\n    <div className=\"form-group\">\n      <textarea className=\"form-control\" rows=\"20\" {...props} />\n    </div>\n  );\n}\n\nexport function FormBtn(props) {\n  return (\n    <button {...props} style={{ float: \"right\", marginBottom: 10 }} className=\"btn btn-success\">\n      {props.children}\n    </button>\n  );\n}\n","import React, { Component } from \"react\";\nimport Nav from \"../components/Nav\";\nimport Jumbotron from \"../components/Jumbotron\"\nimport { Input, TextArea, FormBtn } from \"../components/Form\";\n\n\n\nclass New extends Component{\n\n\nrender(){\n    return(\n<div>\n    <Nav/>\n    <Jumbotron/>\n<div class =\"container\">\n<h1> hello I will eventually have a form</h1>\n<Input/>\n<Input/>\n<Input/>\n<TextArea/>\n<FormBtn/>\n\n</div>\n</div>\n    )\n}\n\n}\nexport default New;","import React from 'react';\nimport {BrowserRouter as Router, Route, Switch} from \"react-router-dom\";\n// import logo from './logo.svg';\nimport './App.css';\nimport Main from \"./pages/Main\"\nimport New from \"./pages/New\"\n\nfunction App(){\nreturn (\n\n<Router>\n<div>\n<Switch>\n<Route exact path=\"/\"component ={Main}/>\n<Route exact path=\"/new\"component ={New}/>\n\n\n\n</Switch>\n\n\n</div>\n\n\n\n\n  </Router>\n)\n\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}